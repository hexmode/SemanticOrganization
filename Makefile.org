#+TITLE: A makefile for developing MediaWiki extensions

Makefiles have a bad rap.

I suspect this is because people developing with dynamic languages think of them as being something that is concerned with writing compiled code.  I imagine that to these developers, the mere mention of a makefile evokes floppy disks.

But makefiles can be a very good way to organize a set of shell commands so that they can be executed reliably.

In this document, we'll take [[https://github.com/ProfessionalWiki/ExternalContent/blob/b42788152e0ebdbb2c7e83ad3ea8f78a80d11953/Makefile][the makefile]] in [[https://github.com/ProfessionalWiki/ExternalContent/blob/master/Makefile][ProfessionalWiki's ExternalContent repository]] and show how, with a few updates, we can just copy it into place and use it to reliably run tests locally, via Github actions to help with continuous integration (CI), or in Gitlab jobs for CI pipelines.

* The makefile

#+begin_src makefile
.PHONY: ci test cs phpunit phpcs stan psalm parser

ci: test cs
test: phpunit parser
cs: phpcs stan psalm

phpunit:
	php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist

phpcs:
	cd ../.. && vendor/bin/phpcs -p -s --standard=$(shell pwd)/phpcs.xml

stan:
	../../vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=2G

psalm:
	../../vendor/bin/psalm --config=psalm.xml

parser:
	php ../../tests/parser/parserTests.php --file=tests/parser/parserTests.txt
#+end_src

ProfessionalWiki has a makefile that fairly simple.  It provides one target (=ci=)—invoked with the command “make ci”—that you can use to test and analyse the code.  The =ci= target invokes the =test= and =cs= targets which, in turn invoke tests with [[https://phpunit.de/][phpunit]] and the [[https://www.mediawiki.org/wiki/Parser_tests][MediaWiki parser test framework]] and then the code analysis tools [[https://squizlabs.github.io/PHP_CodeSniffer/analysis/][PHP CodeSniffer]], [[https://phpstan.org/][PHPStan]], and [[https://psalm.dev/][Psalm]], respectively.

The makefile here captures several commands and makes execution of them simple.  For any extension that has unit tests and parser tests, this makefile will take care of them.

** Example with SemanticOrganization

I've forked the [[https://github.com/thaider/SemanticOrganization][SemanticOrganization extension]] and copied the Makefile from ProfessionalWiki's ExternalContent repository into it

#+begin_src sh
wget https://raw.githubusercontent.com/ProfessionalWiki/ExternalContent/master/Makefile
#+end_src

** First make run:

The first execution of make is unsatisfactory:
#+begin_src sh
$ make
php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist
Using PHP 7.4.26
Could not read "phpunit.xml.dist".
make: *** [Makefile:8: phpunit] Error 1
#+end_src

Well, this exactly what makefiles are made for, fulfilling dependencies.  Let's add a target so that if the phpunit.xml.dist is missing, we create one:

#+begin_src makefile
phpunit.xml.dist:
	(																								\
		echo '<phpunit colors="true">'															&&	\
		echo '<testsuites>'																		&&	\
		echo '<testsuite name="All">'															&&	\
		echo '<directory>tests</directory>'												&&	\
		echo '</testsuite>'																		&&	\
		echo '</testsuites>'																	&&	\
		echo '</phpunit>'																			\
	) > $@
#+end_src

This is suitably generic and will just run all the phpunit files found in the tests directory.  There are none right now, though, so no tests are executed.

(It should be noted here that in this presentation, I'm only showing how to use makefiles, not how to write tests. Writing tests or providing more than the basic framework is left as an exercise for the developer.)
