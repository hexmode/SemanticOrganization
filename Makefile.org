#+TITLE: A makefile for developing MediaWiki extensions

Makefiles have a bad rap.

I suspect this is because people developing with dynamic languages think of them as being something that is concerned with writing compiled code.  I imagine that to these developers, the mere mention of a makefile evokes floppy disks.

But makefiles can be a very good way to organize a set of shell commands so that they can be executed reliably.

In this document, we'll take [[https://github.com/ProfessionalWiki/ExternalContent/blob/b42788152e0ebdbb2c7e83ad3ea8f78a80d11953/Makefile][the makefile]] in [[https://github.com/ProfessionalWiki/ExternalContent/blob/master/Makefile][ProfessionalWiki's ExternalContent repository]] and show how, with a few updates, we can just copy it into place and use it to reliably run tests locally, via Github actions to help with continuous integration (CI), or in Gitlab jobs for CI pipelines.

* The makefile

#+begin_src makefile
.PHONY: ci test cs phpunit phpcs stan psalm parser

ci: test cs
test: phpunit parser
cs: phpcs stan psalm

phpunit:
	php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist

phpcs:
	cd ../.. && vendor/bin/phpcs -p -s --standard=$(shell pwd)/phpcs.xml

stan:
	../../vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=2G

psalm:
	../../vendor/bin/psalm --config=psalm.xml

parser:
	php ../../tests/parser/parserTests.php --file=tests/parser/parserTests.txt
#+end_src

ProfessionalWiki has a makefile that fairly simple.  It provides one target (=ci=)—invoked with the command “make ci”—that you can use to test and analyse the code.  The =ci= target invokes the =test= and =cs= targets which, in turn invoke tests with [[https://phpunit.de/][phpunit]] and the [[https://www.mediawiki.org/wiki/Parser_tests][MediaWiki parser test framework]] and then the code analysis tools [[https://squizlabs.github.io/PHP_CodeSniffer/analysis/][PHP CodeSniffer]], [[https://phpstan.org/][PHPStan]], and [[https://psalm.dev/][Psalm]], respectively.

The makefile here captures several commands and makes execution of them simple.  For any extension that has unit tests and parser tests, this makefile will take care of them.

** Example with SemanticOrganization

I've forked the [[https://github.com/thaider/SemanticOrganization][SemanticOrganization extension]] and copied the Makefile from ProfessionalWiki's ExternalContent repository into it

#+begin_src sh
wget https://raw.githubusercontent.com/ProfessionalWiki/ExternalContent/master/Makefile
#+end_src

** First make run:

The first execution of make is unsatisfactory:
#+begin_src sh
$ make
php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist
Using PHP 7.4.26
Could not read "phpunit.xml.dist".
make: *** [Makefile:8: phpunit] Error 1
#+end_src

Well, this exactly what makefiles are made for, fulfilling dependencies.  Let's add a target so that if the phpunit.xml.dist is missing, we create one:

#+begin_src makefile
phpunit.xml.dist:
	(																								\
		echo '<phpunit colors="true">'															&&	\
		echo '<testsuites>'																		&&	\
		echo '<testsuite name="All">'															&&	\
		echo '<directory>tests</directory>'												&&	\
		echo '</testsuite>'																		&&	\
		echo '</testsuites>'																	&&	\
		echo '</phpunit>'																			\
	) > $@
#+end_src

This is suitably generic and will just run all the phpunit files found in the tests directory.  There are none right now, though, so no tests are executed.

(It should be noted here that in this presentation, I'm only showing how to use makefiles, not how to write tests. Writing tests or providing more than the basic framework is left as an exercise for the developer.)

** Second make run:

Even though no tests are executed, we get to the next makefile target:
#+begin_src sh
$ make
php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist
Using PHP 7.4.26
PHPUnit 8.5.21 by Sebastian Bergmann and contributors.

No tests executed!
php ../../tests/parser/parserTests.php --file=tests/parser/parserTests.txt
This is MediaWiki version 1.35.2 (2e18b74).

PHP Warning:  fopen(tests/parser/parserTests.txt): failed to open stream: No such file or directory in .../tests/parser/TestFileReader.php on line 61
MWException from line 64 of .../tests/parser/TestFileReader.php: Couldn't open file 'tests/parser/parserTests.txt'

#0 .../tests/parser/TestFileReader.php(39): TestFileReader->__construct()
#1 .../tests/parser/ParserTestRunner.php(702): TestFileReader::read()
#2 .../tests/parser/parserTests.php(189): ParserTestRunner->runTestsFromFiles()
#3 .../maintenance/doMaintenance.php(107): ParserTestsMaintenance->execute()
#4 .../tests/parser/parserTests.php(200): require_once('...')
#5 {main}
make: *** [Makefile:20: parser] Error 1
#+end_src

Again, we are missinsg a file.  This time, though, it is the =parserTests.txt= file.  Since there is no use running parser tests if none exist and it is easier to check for the existance of a file, lets add that codition to the parser target:

#+begin_src makefile
parser:
	test ! -f tests/parser/parserTests.txt														||	\
		php ../../tests/parser/parserTests.php --file=tests/parser/parserTests.txt
#+end_src

A makefile will stop executing if a shell command returns a false value.  This means that we have to test for the thing that would cause our parser tests to fail — no =parserTests.txt= — and then run the tests if the tests for non-existance fails.

** After /n/ runs
We've changed the simple makefile to check for the support files before running the checks.

This means we can execute =make= without any errors.  Good.

The core of the file is still pretty simple, very similar to the original from ProfessionalWiki, but now it should be able to run in any MediaWiki extension that follows some simple standard layout conventions and will adapt to if the extension has phpunit tests or not, parser tests or not, etc.

#+begin_src makefile
ci: test cs
test: phpunit parser
cs: phpcs stan psalm

phpunit:
	test ! -f phpunit.xml.dist														||	\
		php ../../tests/phpunit/phpunit.php -c phpunit.xml.dist

phpcs:
	test ! -f phpcs.xml															||	(	\
		cd ../..																	&&	\
		vendor/bin/phpcs -p -s --standard=$(shell pwd)/phpcs.xml						)

stan:
	test ! -f phpstan.neon															||	\
		../../vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=2G

psalm:
	test ! -f psalm.xml																||	\
		../../vendor/bin/psalm --config=psalm.xml

parser:
	test ! -f tests/parser/parserTests.txt											||	\
		php ../../tests/parser/parserTests.php --file=tests/parser/parserTests.txt
#+end_src

** But what about running on Github?

Github allows you to specify [[https://docs.github.com/en/actions][actions]] and these can be used check the code every time a comand runs.

But so far, our makefile has depended upon a MediaWiki that is already checked out and set up.  How can we use it on github without copying over our development environment?

Containers (of course!)

Let's copy the [[https://github.com/SemanticMediaWiki/SemanticMediaWiki/blob/master/.github/workflows/main.yml][main.yml file from SemanticMediaWiki]] and tweak it for our own use.  It really doesn't take much, just change the =EXT_NAME= env section to our extension, modify the [[https://github.com/SemanticMediaWiki/SemanticMediaWiki/blob/1348700de6427c5a7445bdaf4f6bb1a287e6ae95/.github/workflows/main.yml#L78][construction of the composer.local.json]], and away we go!

Finally, let's change the [[https://github.com/hexmode/SemanticOrganization/blob/b13f6242f48d6c5893497c6818bd2b325e0e3369/.github/workflows/main.yml#L112][last step]], where the tests are run, to invoke our make file.

[[https://github.com/hexmode/SemanticOrganization/runs/4424862019][Works like a dream]].

** But, wait, what about using a container on our local system?

Good point.  While a container is use to set up the filesystem for the running the tests, the Github workflow takes the time to set up a database for the wiki and create a =LocalSettings.php= file.

This means that there is a consistent, predictable test setup for Github runs, but on our local system we're still depending on whatever development setup we have in place.  We'd like to use the same setup for both Github and our local development.  To do that, we'll first copy the steps from the Github steps in main.yml to our Makefile.

# Local Variables:
# org-src-preserve-indentation: t
# End:
